using SchoolAPI.Models;
using SchoolAPI.Models.MD;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace SchoolAPI.Controllers
{
    public class ExamController : ApiController
    {


        [HttpGet]
        public HttpResponseMessage Children(int user_id)
        {
            try
            {
                var user = new UserPrivateInfoClass(user_id);
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, status = "Success", results = user.children });
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }



        [HttpGet]
        public HttpResponseMessage GetSubjects(int user_id)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    var user = entities.USERS.FirstOrDefault(a => a.USER_ID == user_id);
                    if (user != null)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, status = "Done", results = getExamSubject(user) });

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, status = "No exist user!" });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }


        [HttpGet]
        public HttpResponseMessage GetExams(int subject_id)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    var _exams = entities.EXAMS.Where(ex => ex.SUBJECT_ID == subject_id).OrderByDescending(ex => ex.EXAM_ID);
                    if(_exams == null || _exams.ToList().Count == 0)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, status = "No exist exams!" });


                    List<Exam> exams = new List<Exam>();
                    foreach (var item in _exams)
                    {
                        var _student_exam = entities.STUDENTS_EXAM.FirstOrDefault(se => se.EXAM_ID == item.EXAM_ID);
                        exams.Add(new Exam(item.EXAM_NAME, _student_exam.GRADE, item.EXAM_MAX, item.EXAM_PASS, item.EXAM_WEGHIT, _student_exam.ABSENT));
                    }

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, status = "No exist user!" });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }

        private List<ExamSubject> getExamSubject(USERS user)
        {
            List<ExamSubject> list = new List<ExamSubject>();
            Entities e = new Entities();
            var _student = e.STUDENTS.FirstOrDefault(s => s.USER_ID == user.USER_ID);
            foreach (var s in new UserPrivateInfoClass(user).subjects)
            {
                var _exams = e.EXAMS.Where(ex => ex.SUBJECT_ID == s.id).OrderByDescending(ex => ex.EXAM_ID);
                if (_exams == null || _exams.ToList().Count == 0)
                    continue;

                List<Exam> exams = new List<Exam>();
                foreach (var item in _exams)
                {
                    var _student_exam = e.STUDENTS_EXAM.FirstOrDefault(se => se.STUDENT_ID == _student.STUDENT_ID && se.EXAM_ID == item.EXAM_ID);
                    exams.Add(new Exam(item.EXAM_NAME, _student_exam.GRADE, item.EXAM_MAX, item.EXAM_PASS, item.EXAM_WEGHIT, _student_exam.ABSENT));
                }
                list.Add(new ExamSubject(s, exams));
            }

            return list;
        }

    }

    class Exam
    {

        public string examName { get; set; }
        public decimal? mark { get; set; }
        public int? max { get; set; }
        public int? min { get; set; }
        public decimal? weight { get; set; }
        public short? absent { get; set; }

        public Exam(string examName, decimal? mark, int? max, int? min, decimal? weight, short? absent)
        {
            this.examName = examName;
            this.mark = mark;
            this.max = max;
            this.min = min;
            this.weight = weight;
            this.absent = absent;
        }
    }

    class ExamSubject
    {
        public SubjectClass subject { get; set; }
        public List<Exam> marks { get; set; }

        public ExamSubject(SubjectClass subject, List<Exam> marks)
        {
            this.subject = subject;
            this.marks = marks;
        }
    } 
}
