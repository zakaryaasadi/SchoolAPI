using SchoolAPI.Models;
using SchoolAPI.Models.MD;
using SchoolAPI.ModelView;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace SchoolAPI.Controllers
{
    public class HomeworkController : ApiController
    {
        [HttpGet]
        public HttpResponseMessage Get(int user_id, int page = 1)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    List<MessageClass> messages = new List<MessageClass>();

                    var _messagesTotal = entities.MESSAGE_RECIPIENTS
                        .Include("MESSAGES")
                        .Where(m => m.USER_ID == user_id)
                        .OrderByDescending(m => m.MESSAGE_ID);

                    var _messages = _messagesTotal.Skip(5 * (page - 1)).Take(5);

                    foreach (var item in _messages)
                    {
                        if (item.MESSAGES.MESSAGE_TYPE == 2)
                        {
                            var _messageClass = new MessageClass(item.MESSAGES);
                            _messageClass.isRead = int.Parse(item.IS_READ.ToString());
                            messages.Add(_messageClass);
                        }
                    }



                    int numTotalPage = (int)Math.Ceiling(_messagesTotal.Count() / 5.0);

                    if (page > numTotalPage)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, totalPage = numTotalPage, status = "There is not page: " + page });

                    if (messages.Count == 0)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, totalPage = numTotalPage, status = "There are not messages for you", results = messages });

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, totalPage = numTotalPage, numResult = messages.Count, page = page, status = "Success", results = messages });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }


        [HttpGet]
        public HttpResponseMessage Add(int school_id, int user_id, int subject_id, string title, string body)
        {

            try
            {
                using (Entities entities = new Entities())
                {
                    MESSAGES _message = new MESSAGES()
                    {
                        MESSAGE_ID = entities.MESSAGES.Max(n => n.MESSAGE_ID) + 1,
                        FROM_USER_ID = user_id,
                        MESSAGE_SUBJECT = title,
                        MESSAGE_CONTENT = body,
                        MESSAGE_DATE = DateTime.Now,
                        CREATION_DATE = DateTime.Now,
                        MESSAGE_TYPE = 2,
                        MESSAGE_STATUS = 2,
                        SUBJECT_ID = subject_id,
                        SCHOOL_ID = school_id
                    };
                    entities.MESSAGES.Add(_message);

                    foreach (var StSu in entities.STUDENT_SUBJECTS.Where(ss => ss.SUBJECT_ID == subject_id))
                    {
                        MESSAGE_RECIPIENTS _mr = new MESSAGE_RECIPIENTS()
                        {
                            MESSAGE_RECIPIENT_ID = entities.MESSAGE_RECIPIENTS.Max(mr => mr.MESSAGE_RECIPIENT_ID) + 1,
                            MESSAGE_ID = _message.MESSAGE_ID,
                            USER_ID = StSu.STUDENTS.USER_ID
                        };
                        entities.MESSAGE_RECIPIENTS.Add(_mr);
                        entities.SaveChanges();
                    }

                    MessageClass messageResult = new MessageClass(entities.MESSAGES.FirstOrDefault(n => n.MESSAGE_ID == _message.MESSAGE_ID));
                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, status = "Sending...", results = new List<MessageClass>() { messageResult } });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }


        [HttpGet]
        public HttpResponseMessage GetClasses(int user_id)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    USERS user = entities.USERS.FirstOrDefault(a => a.USER_ID == user_id);
                    if (user != null)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, status = "Done", results = new UserPrivateInfoClass(user).classes });

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, status = "No exist user!" });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }
    }

}




