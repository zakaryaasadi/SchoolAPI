using SchoolAPI.Models;
using SchoolAPI.Models.MD;
using SchoolAPI.ModelView;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;

namespace SchoolAPI.Controllers
{
    public class MessageController : ApiController
    {
        [HttpGet]
        public HttpResponseMessage Get(int user_id, int page = 1)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    List<MessageClass> messages = new List<MessageClass>();

                    var _messagesTotal = entities.MESSAGE_RECIPIENTS
                        .Include("MESSAGES")
                        .Where(m => m.USER_ID == user_id)
                        .OrderByDescending(m => m.MESSAGE_ID);

                    var _messages = _messagesTotal.Skip(5 * (page - 1)).Take(5);

                    foreach (var item in _messages)
                    {
                       if(item.MESSAGES.MESSAGE_TYPE == 1)
                        {
                            var _messageClass = new MessageClass(item.MESSAGES);
                            _messageClass.isRead = int.Parse(item.IS_READ.ToString());
                            messages.Add(_messageClass);
                        }
                    }



                    int numTotalPage = (int)Math.Ceiling( _messagesTotal.Count() / 5.0);

                    if (page > numTotalPage)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, totalPage = numTotalPage, status = "There is not page: " + page });

                    if (messages.Count == 0)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, totalPage = numTotalPage, status = "There are not messages for you", results = messages });

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, totalPage = numTotalPage, numResult = _messagesTotal.Count(), page = page, status = "Success", results = messages });
                }
        }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
}



        [HttpGet]
        public HttpResponseMessage GetSent(int user_id, int page = 1)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    List<MessageClass> messages = new List<MessageClass>();

                    var _messagesTotal = entities.MESSAGES
                        .Where(m => m.FROM_USER_ID == user_id && m.MESSAGE_TYPE == 1)
                        .OrderByDescending(m => m.MESSAGE_ID);

                    var _messages = _messagesTotal.Skip(5 * (page - 1)).Take(5);

                    foreach (var item in _messages)
                       messages.Add(new MessageSentClass(item));



                    int numTotalPage = (int)Math.Ceiling(_messagesTotal.Count() / 5.0);

                    if (page > numTotalPage)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, totalPage = numTotalPage, status = "There is not page: " + page });

                    if (messages.Count == 0)
                        return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 404, totalPage = numTotalPage, status = "There are not messages for you", results = messages });

                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, totalPage = numTotalPage, numResult = _messagesTotal.Count(), page = page, status = "Success", results = messages });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }

        [HttpGet]
        public HttpResponseMessage IsRead(int user_id, int message_id)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    var message = entities.MESSAGE_RECIPIENTS.FirstOrDefault(m => m.USER_ID == user_id && m.MESSAGE_ID == message_id);
                    if (message != null)
                        message.IS_READ = 1;
                    entities.SaveChanges();
                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200,  status = "Success" });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }

        [HttpPost]
        public HttpResponseMessage Add(int school_id, int user_id, [FromBody] addMessage message)
        {
            try
            {
                using (Entities entities = new Entities())
                {
                    MESSAGES _message = new MESSAGES()
                    {
                        MESSAGE_ID = entities.MESSAGES.Max(n => n.MESSAGE_ID) + 1,
                        FROM_USER_ID = user_id,
                        MESSAGE_SUBJECT = message.title,
                        MESSAGE_CONTENT = message.body,
                        MESSAGE_DATE = DateTime.Now,
                        CREATION_DATE = DateTime.Now,
                        MESSAGE_TYPE = 1,
                        MESSAGE_STATUS = 2,
                        SCHOOL_ID = school_id
                    };
                    entities.MESSAGES.Add(_message);

                    foreach (var user in message.toUsers)
                    {
                        MESSAGE_RECIPIENTS _mr = new MESSAGE_RECIPIENTS()
                        {
                            MESSAGE_RECIPIENT_ID = entities.MESSAGE_RECIPIENTS.Max(mr => mr.MESSAGE_RECIPIENT_ID) + 1,
                            MESSAGE_ID = _message.MESSAGE_ID,
                            USER_ID = user
                        };
                        entities.MESSAGE_RECIPIENTS.Add(_mr);
                        entities.SaveChanges();
                    }

                    MessageClass messageResult = new MessageClass(entities.MESSAGES.FirstOrDefault(n => n.MESSAGE_ID == _message.MESSAGE_ID));
                    return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 200, status = "Sending...", results = new List<MessageClass>() { messageResult } });
                }
            }
            catch (Exception ex)
            {
                return Request.CreateResponse(HttpStatusCode.OK, new Result() { statusCode = 400, status = ex.Message });
            }
        }



        //[HttpPost]
        //public HttpResponseMessage Add([FromBody] MessageClass message)
        //{

        //    using (Entities entities = new Entities())
        //    {
        //        var _users = entities.GROUPS.FirstOrDefault(g => g.GROUP_ID == message.group.id).GROUP_MEMBERS;

        //        List<UserPublicInfoClass> users = new List<UserPublicInfoClass>();
        //        foreach (var item in _users)
        //            users.Add(new UserPublicInfoClass(item.USERS));

        //        return Add(message, users);
        //    }
        //}
    }
}

public class addMessage
{
    public List<int> toUsers;
    public string title;
    public string body;
}